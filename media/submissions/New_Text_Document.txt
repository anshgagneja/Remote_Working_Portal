@login_required
def assignment_detail(req,id):
    assignment=Assignment.objects.get(id = id)
    initial = {
        "title":assignment.title,
        "upload":assignment.upload,
        "due_date":assignment.due_date,
        "course_code":assignment.course_code,
        "course_title":assignment.course_title
    }
    assignment_form = forms.AssignmentForm(initial=initial)
    context = {
        "single_assignment":assignment,
        "assignment_id":id,
        "assignment":assignment_form
    }
    return render(req,'students/assignment-detail.html',context=context)

@login_required
def delete_assignment(request, id):
    assignment = Assignment.objects.get(id=id)
    user_id = assignment.user_id
    if user_id == request.user.id:
        assignment.delete()
        messages.success(request, "Assignment was successfully deleted")
        return redirect('/')
    else:
        context = {
            "single_assignment": assignment,
            "assignment_id": id
        }
        messages.error(request, "You are not authorized to carry out this operation")
        return render(request, 'student/assignment_detail.html', context=context)


@login_required
def edit_assignment(request, id):
    assignment = Assignment.objects.get(id=id)
    user_id = assignment.user_id
    initial = {
        "title": assignment.title,
        "upload": assignment.upload,
        "due_date": assignment.due_date,
        "course_code": assignment.course_code,
        "course_title": assignment.course_title
    }
    assignment_form = forms.AssignmentForm(request.POST, request.FILES, instance=assignment, initial=initial)
    if request.method == "POST":

        if assignment_form.is_valid():
            current_user = request.user.id
            if current_user == user_id:
                assignment_form.save()
                assignment.last_updated = datetime.date.today()
                assignment.save()
                messages.success(request, 'Assignment was successfully edited.')
                new_data = Assignment.objects.last()
                return redirect('assignment_detail', id=new_data.id)
            else:
                messages.error(request, "You are not authorized to carry out this operation")
        else:
            for error in assignment_form.errors.values():
                messages.error(request, error)

    context = {
        "assignment": assignment_form,
        "assignment_id": id
    }
    return render(request, "student/assignment-detail.html", context=context)

@login_required
def submit_assignment(request, id):
    assignment = Assignment.objects.get(id=id)
    submission_form = forms.SubmissionForm(request.POST, request.FILES)
    if assignment.due_date > datetime.date.today():
            if request.method == "POST":
                if submission_form.is_valid():
                    user = request.user.is_student
                    submission = submission_form.save(commit=False)
                    submission.user_id = request.user.id
                    submission.assignment_id = id
                    submission.save()
                    messages.success(request, 'Assignment was successfully submitted.')
                    return redirect('submission-detail', id=submission.id)
                else:
                    for error in submission_form.errors.values():
                            messages.error(request, error)
            context = {
                "submission": submission_form,
                "assignment_id": id,
                "assignment": assignment
            }
            return render(request, "student/submission.html", context=context)
    else:
            context = {
                "assignment_id": id,
            }
            return render(request, "student/past_due.html", context=context)


@login_required
def submission_detail(request, id):
    submission = Submission.objects.get(id=id)
    context = {
        "single_submission": submission,
        "submission_id": id
    }
    return render(request, 'student/submission-detail.html', context=context)


@login_required
def delete_submission(request, id):
    submission = Submission.objects.get(id=id)
    if submission.user_id == request.user.id:
        submission.delete()
        return redirect('/')
    else:
        context = {
            "single_submission": submission,
            "submission_id": id
        }
        messages.error(request, "You are not authorized to carry out this operation")
        return render(request, 'student/submission-detail.html', context=context)


@login_required
def edit_submission(request, id):
    submission = Submission.objects.get(id=id)
    assignment_id = submission.assignment_id
    assignment = Assignment.objects.get(id=assignment_id)
    user_id = submission.user_id
    initial = {
        "upload": submission.upload
    }
    submission_form = forms.SubmissionForm(request.POST, request.FILES, instance=submission, initial=initial)
    if request.method == "POST":
        if assignment.due_date > datetime.date.today():
            if submission_form.is_valid():
                current_user = request.user.id
                if current_user == user_id:
                    submission_form.save()
                    submission.last_updated = datetime.date.today()
                    submission.save()
                    messages.success(request, 'Submission was successfully edited.')
                    new_data = Submission.objects.last()
                    return redirect('submission-detail', id=new_data.id)
                else:
                    messages.error(request, "You are not authorized to carry out this operation")
            else:
                for error in submission_form.values():
                    messages.error(request, error)

        else:
            messages.error(request, "The due date for this assignment has passed")
    context = {
        "submission": submission_form,
        "submission_id": id,
        "single_submission": submission
    }
    return render(request, "student/submission-detail.html", context=context)